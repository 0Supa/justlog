{"version":3,"sources":["store.tsx","hooks/useLocalStorage.ts","components/Docs.tsx","components/Settings.tsx","components/Filters.tsx","hooks/useChannels.ts","services/isUserId.ts","icons/Txt.tsx","hooks/useLog.ts","hooks/useThirdPartyEmotes.ts","hooks/useBttvChannelEmotes.ts","hooks/useFfzChannelEmotes.ts","hooks/useBttvGlobalEmotes.ts","hooks/useFfzGlobalEmotes.ts","components/Message.tsx","components/User.tsx","components/LogLine.tsx","components/ContentLog.tsx","components/TwitchChatLogLine.tsx","components/TwitchChatLogContainer.tsx","components/Log.tsx","components/LogContainer.tsx","hooks/useAvailableLogs.ts","components/Page.tsx","index.tsx"],"names":["LocalStorageSettings","url","URL","window","location","href","defaultContext","state","queryCache","QueryCache","apiBaseUrl","process","REACT_APP_API_BASE_URL","protocol","host","settings","showEmotes","displayName","value","showName","showTimestamp","twitchChatMode","newOnBottom","currentChannel","searchParams","get","currentUsername","showSwagger","has","error","setState","setCurrents","setSettings","newSettings","setShowSwagger","show","store","createContext","Provider","StateProvider","children","key","initialValue","useState","item","localStorage","getItem","JSON","parse","console","log","setValue","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","returnValue","useLocalStorage","setSettingsStorage","Object","keys","removeQueries","toLowerCase","trim","set","history","replaceState","toString","delete","QueryDefaults","staleTime","DocsWrapper","styled","div","Docs","useContext","IconButton","aria-controls","aria-haspopup","onClick","size","color","Swagger","SwaggerWrapper","baseUrl","ReactDOM","createPortal","style","display","requestInterceptor","req","includes","port","document","body","SettingsContainer","Settings","anchorEl","setAnchorEl","menuItems","name","setting","push","MenuItem","newSetting","toggleSetting","Check","Clear","entries","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","FiltersContainer","form","FiltersWrapper","Filters","useQueryCache","channels","data","useQuery","queryUrl","fetch","then","response","ok","Error","statusText","json","refetchOnWindowFocus","refetchOnReconnect","useChannels","onSubmit","e","preventDefault","target","HTMLFormElement","FormData","channel","username","invalidateQueries","action","Autocomplete","options","map","width","defaultValue","getOptionLabel","clearOnBlur","renderInput","params","TextField","label","variant","autoFocus","autoComplete","Button","type","isUserId","startsWith","getUserId","replace","Txt","className","height","viewBox","d","fill","fillRule","useLog","year","month","channelIsId","usernameIsId","append","messages","msg","timestamp","Date","emotes","parseEmotes","text","tags","messageText","parsed","groups","split","positionGroups","startPos","endPos","startIndex","Number","endIndex","code","substr","useThirdPartyEmotes","channelId","Promise","resolve","sharedEmotes","channelEmotes","res","isLoading","channelEmote","urls","small","medium","big","useBttvChannelEmotes","sets","values","emoticons","String","useFfzChannelEmotes","useBttvGlobalEmotes","useFfzGlobalEmotes","MessageContainer","Emote","img","Message","replaced","message","thirdPartyEmotes","renderMessage","buffer","renderMessagePrefix","x","length","c","emote","alt","src","emoteFound","componentDecorator","decoratedHref","decoratedText","UserContainer","attrs","props","User","renderColor","dayjs","extend","utc","timezone","tz","guess","LogLineContainer","li","LogLine","LogLineWithEmotes","format","ContentLogContainer","ul","ContentLog","searchText","setSearchText","logs","filter","search","useRef","useEffect","activeSearchField","current","onMouseEnter","inputRef","onChange","InputProps","startAdornment","InputAdornment","position","Search","itemCount","itemSize","index","TwitchChatLogLineContainer","TwitchChatLogLine","TwitchChatContentLog","LogContainer","Log","initialLoad","load","setLoad","LoadableLog","onLoad","txtHref","rel","LoadableLogContainer","LogContainerDiv","ctrlKey","navigator","platform","toUpperCase","indexOf","listener","focus","addEventListener","removeEventListener","availableLogs","catch","useAvailableLogs","PageContainer","Page","pageTheme","createMuiTheme","palette","App","render","StrictMode","ThemeProvider","theme","getElementById"],"mappings":"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","file":"static/js/main.7390b87b.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\nimport { QueryCache } from \"react-query\";\nimport { useLocalStorage } from \"./hooks/useLocalStorage\";\n\nexport interface Settings {\n    showEmotes: Setting,\n    showName: Setting,\n    showTimestamp: Setting,\n    twitchChatMode: Setting,\n    newOnBottom: Setting,\n}\n\nexport enum LocalStorageSettings {\n    showEmotes,\n    showName,\n    showTimestamp,\n    twitchChatMode,\n    newOnBottom,\n}\n\nexport interface Setting {\n    displayName: string,\n    value: boolean,\n}\n\nexport interface State {\n    settings: Settings,\n    queryCache: QueryCache,\n    apiBaseUrl: string,\n    currentChannel: string | null,\n    currentUsername: string | null,\n    error: boolean,\n    activeSearchField: HTMLInputElement | null,\n    showSwagger: boolean,\n}\n\nexport type Action = Record<string, unknown>;\n\nconst url = new URL(window.location.href);\nconst defaultContext = {\n    state: {\n        queryCache: new QueryCache(),\n        apiBaseUrl: process.env.REACT_APP_API_BASE_URL ?? window.location.protocol + \"//\" + window.location.host,\n        settings: {\n            showEmotes: {\n                displayName: \"Show Emotes\",\n                value: true,\n            },\n            showName: {\n                displayName: \"Show Name\",\n                value: true,\n            },\n            showTimestamp: {\n                displayName: \"Show Timestamp\",\n                value: true,\n            },\n            twitchChatMode: {\n                displayName: \"Twitch Chat Mode\",\n                value: false,\n            },\n            newOnBottom: {\n                displayName: \"Newest messages on bottom\",\n                value: false,\n            },\n        },\n        currentChannel: url.searchParams.get(\"channel\"),\n        currentUsername: url.searchParams.get(\"username\"),\n        showSwagger: url.searchParams.has(\"swagger\"),\n        error: false,\n    } as State,\n    setState: (state: State) => { },\n    setCurrents: (currentChannel: string | null = null, currentUsername: string | null = null) => { },\n    setSettings: (newSettings: Settings) => { },\n    setShowSwagger: (show: boolean) => { },\n};\n\nconst store = createContext(defaultContext);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }: { children: JSX.Element }): JSX.Element => {\n\n    const [settings, setSettingsStorage] = useLocalStorage(\"justlog:settings\", defaultContext.state.settings);\n    const [state, setState] = useState({ ...defaultContext.state, settings });\n\n    const setShowSwagger = (show: boolean) => {\n        const url = new URL(window.location.href);\n\n        if (show) {\n            url.searchParams.set(\"swagger\", \"\")\n        } else {\n            url.searchParams.delete(\"swagger\");\n        }\n\n        window.history.replaceState({}, \"justlog\", url.toString());\n\n        setState({ ...state, showSwagger: show })\n    }\n\n    const setSettings = (newSettings: Settings) => {\n        for (const key of Object.keys(newSettings)) {\n            if (typeof (defaultContext.state.settings as unknown as Record<string, Setting>)[key] === \"undefined\") {\n                delete (newSettings as unknown as Record<string, Setting>)[key];\n            }\n        }\n\n        state.queryCache.removeQueries(\"log\");\n\n        setSettingsStorage(newSettings);\n        setState({ ...state, settings: newSettings });\n    }\n\n    const setCurrents = (currentChannel: string | null = null, currentUsername: string | null = null) => {\n        currentChannel = currentChannel?.toLowerCase().trim() ?? null;\n        currentUsername = currentUsername?.toLowerCase().trim() ?? null;\n\n        setState({ ...state, currentChannel, currentUsername, error: false });\n\n        const url = new URL(window.location.href);\n        if (currentChannel) {\n            url.searchParams.set(\"channel\", currentChannel);\n        }\n        if (currentUsername) {\n            url.searchParams.set(\"username\", currentUsername);\n        }\n\n        window.history.replaceState({}, \"justlog\", url.toString());\n    }\n\n    return <Provider value={{ state, setState, setSettings, setCurrents, setShowSwagger }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n\nexport const QueryDefaults = {\n    staleTime: 5 * 10 * 1000,\n};","import { useState } from \"react\";\n\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n\t// State to store our value\n\t// Pass initial state function to useState so logic is only executed once\n\tconst [storedValue, setStoredValue] = useState(() => {\n\t\ttry {\n\t\t\t// Get from local storage by key\n\t\t\tconst item = window.localStorage.getItem(key);\n\t\t\t// Parse stored json or if none return initialValue\n\t\t\treturn item ? JSON.parse(item) : initialValue;\n\t\t} catch (error) {\n\t\t\t// If error also return initialValue\n\t\t\tconsole.log(error);\n\t\t\tsetValue(initialValue);\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\t// Return a wrapped version of useState's setter function that ...\n\t// ... persists the new value to localStorage.\n\tconst setValue = (value: T): void => {\n\t\ttry {\n\t\t\t// Allow value to be a function so we have same API as useState\n\t\t\tconst valueToStore =\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\n\t\t\t// Save state\n\t\t\tsetStoredValue(valueToStore);\n\t\t\t// Save to local storage\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t\t} catch (error) {\n\t\t\t// A more advanced implementation would handle the error case\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tlet returnValue = storedValue;\n\tif (typeof initialValue === \"object\") {\n\t\treturnValue = { ...initialValue, ...storedValue };\n\t}\n\n\treturn [returnValue, setValue];\n}","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport { IconButton } from \"@material-ui/core\";\nimport SwaggerUI from \"swagger-ui-react\"\nimport \"swagger-ui-react/swagger-ui.css\"\nimport ReactDOM from \"react-dom\";\nimport { store } from \"../store\";\n\nconst DocsWrapper = styled.div`\n\n`;\n\nexport function Docs() {\n    const { state, setShowSwagger } = useContext(store);\n\n    const handleClick = () => {\n        setShowSwagger(!state.showSwagger);\n    }\n\n    return <DocsWrapper>\n        <IconButton aria-controls=\"docs\" aria-haspopup=\"true\" onClick={handleClick} size=\"small\" color={state.showSwagger ? \"primary\" : \"default\"}>\n            <DescriptionIcon />\n        </IconButton>\n        <Swagger show={state.showSwagger} />\n    </DocsWrapper>;\n}\n\nconst SwaggerWrapper = styled.div`\n    position: absolute;\n    top: 0;\n    background: var(--bg);\n    left: 0;\n    right: 0;\n    margin-top: 90px;\n    z-index: 999;\n    padding-bottom: 90px;\n\n    .swagger-ui {\n        background: var(--bg);\n        \n        .scheme-container {\n            background: var(--bg-bright);\n        }\n    }\n`;\n\ninterface SwaggerRequest {\n    [k: string]: any;\n}\n\nfunction Swagger({ show }: { show: boolean }) {\n    const { state } = useContext(store);\n    const baseUrl = new URL(state.apiBaseUrl);\n\n    const requestInterceptor = (req: SwaggerRequest): SwaggerRequest => {\n        if (req.url.includes(\"swagger.json\")) {\n            return req;\n        }\n\n        const url = new URL(req.url);\n\n        url.host = baseUrl.host;\n        url.protocol = baseUrl.protocol;\n        url.port = baseUrl.port;\n\n        req.url = url.toString();\n\n        return req;\n    }\n\n    return ReactDOM.createPortal(\n        <SwaggerWrapper style={{ display: show ? \"block\" : \"none\" }}>\n            <SwaggerUI url=\"/swagger.json\" requestInterceptor={requestInterceptor} />\n        </SwaggerWrapper>,\n        document.body\n    );\n}","import { IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport { Check, Clear, Settings as SettingsIcon } from \"@material-ui/icons\";\nimport React, { MouseEvent, useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Setting, store } from \"../store\";\n\nconst SettingsContainer = styled.div`\n\t\n`;\n\nexport function Settings() {\n\tconst { state, setSettings } = useContext(store);\n\tconst [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n\tconst handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n\tconst handleClose = () => {\n\t\tsetAnchorEl(null);\n\t};\n\n\tconst toggleSetting = (name: string, setting: Setting) => {\n\t\tconst newSetting = { ...setting, value: !setting.value };\n\n\t\tsetSettings({ ...state.settings, [name]: newSetting });\n\t};\n\n\tconst menuItems = [];\n\n\tfor (const [name, setting] of Object.entries(state.settings)) {\n\t\tmenuItems.push(\n\t\t\t<MenuItem key={name} onClick={() => toggleSetting(name, setting)}>\n\t\t\t\t{setting.value ? <Check /> : <Clear />}&nbsp;&nbsp;{setting.displayName} \n\t\t\t</MenuItem>\n\t\t);\n\t}\n\n\treturn (\n\t\t<SettingsContainer>\n\t\t\t<IconButton aria-controls=\"settings\" aria-haspopup=\"true\" onClick={handleClick} size=\"small\">\n\t\t\t\t<SettingsIcon />\n\t\t\t</IconButton>\n\t\t\t<Menu\n\t\t\t\tid=\"settings\"\n\t\t\t\tanchorEl={anchorEl}\n\t\t\t\tkeepMounted\n\t\t\t\topen={Boolean(anchorEl)}\n\t\t\t\tonClose={handleClose}\n\t\t\t>\n\t\t\t\t{menuItems}\n\t\t\t</Menu>\n\t\t</SettingsContainer>\n\t);\n}","import { Button, TextField } from \"@material-ui/core\";\nimport { Autocomplete } from '@material-ui/lab';\nimport React, { FormEvent, useContext } from \"react\";\nimport { useQueryCache } from \"react-query\";\nimport styled from \"styled-components\";\nimport { useChannels } from \"../hooks/useChannels\";\nimport { store } from \"../store\";\nimport { Docs } from \"./Docs\";\nimport { Settings } from \"./Settings\";\n\nconst FiltersContainer = styled.form`\n    display: inline-flex;\n    align-items: center;\n    padding: 15px;\n    background: var(--bg-bright);\n    border-bottom-left-radius: 3px;\n    border-bottom-right-radius: 3px;\n\tmargin: 0 auto;\n    z-index: 99;\n\n    > * {\n        margin-right: 15px !important;    \n\n        &:last-child {\n            margin-right: 0 !important;\n        }\n    }\n`;\n\nconst FiltersWrapper = styled.div`\n    text-align: center;\n`;\n\nexport function Filters() {\n    const { setCurrents, state } = useContext(store);\n    const queryCache = useQueryCache();\n    const channels = useChannels();\n\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (e.target instanceof HTMLFormElement) {\n            const data = new FormData(e.target);\n\n            const channel = data.get(\"channel\") as string | null;\n            const username = data.get(\"username\") as string | null;\n\n            queryCache.invalidateQueries([\"log\", { channel: channel?.toLowerCase(), username: username?.toLowerCase() }]);\n\n            setCurrents(channel, username);\n        }\n    };\n\n    return <FiltersWrapper>\n        <FiltersContainer onSubmit={handleSubmit} action=\"none\">\n            <Autocomplete\n                id=\"autocomplete-channels\"\n                options={channels.map(channel => channel.name)}\n                style={{ width: 225 }}\n                defaultValue={state.currentChannel}\n                getOptionLabel={(channel: string) => channel}\n                clearOnBlur={false}\n                renderInput={(params) => <TextField {...params} name=\"channel\" label=\"channel\" variant=\"filled\" autoFocus={state.currentChannel === null} />}\n            />\n            <TextField error={state.error} name=\"username\" label=\"username\" variant=\"filled\" autoComplete=\"off\" defaultValue={state.currentUsername} autoFocus={state.currentChannel !== null && state.currentUsername === null} />\n            <Button variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\">load</Button>\n            <Settings />\n            <Docs />\n        </FiltersContainer>\n    </FiltersWrapper>\n}","import { useContext } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { store } from \"../store\";\n\nexport interface Channel {\n    userID: string,\n    name: string\n}\n\nexport function useChannels(): Array<Channel> {\n    const { state } = useContext(store);\n\n    const { data } = useQuery<Array<Channel>>(`channels`, () => {\n\n        const queryUrl = new URL(`${state.apiBaseUrl}/channels`);\n\n        return fetch(queryUrl.toString()).then((response) => {\n            if (response.ok) {\n                return response;\n            }\n\n            throw Error(response.statusText);\n        }).then(response => response.json())\n            .then((data: { channels: Array<Channel> }) => data.channels);\n    }, { refetchOnWindowFocus: false, refetchOnReconnect: false });\n\n    return data ?? [];\n}","export function isUserId(value: string) {\n    return value.startsWith(\"id:\");\n}\n\nexport function getUserId(value: string) {\n    return value.replace(\"id:\", \"\");\n}","import React from \"react\";\n\nexport function Txt() {\n    return (\n        <svg className={\"txt\"} height={32} viewBox=\"0 0 32 32\" width={32}>\n            <title />\n            <path\n                d=\"M21 26v2.003A1.995 1.995 0 0119.003 30H3.997A2 2 0 012 27.993V5.007C2 3.898 2.9 3 4.009 3H14v6.002c0 1.111.898 1.998 2.006 1.998H21v2h-8.993A3.003 3.003 0 009 15.999V23A2.996 2.996 0 0012.007 26H21zM15 3v5.997c0 .554.451 1.003.99 1.003H21l-6-7zm-3.005 11C10.893 14 10 14.9 10 15.992v7.016A2 2 0 0011.995 25h17.01C30.107 25 31 24.1 31 23.008v-7.016A2 2 0 0029.005 14h-17.01zM14 17v6h1v-6h2v-1h-5v1h2zm6 2.5L18 16h1l1.5 2.625L22 16h1l-2 3.5 2 3.5h-1l-1.5-2.625L19 23h-1l2-3.5zm6-2.5v6h1v-6h2v-1h-5v1h2z\"\n                fill=\"#929292\"\n                fillRule=\"evenodd\"\n            />\n        </svg>\n    );\n}","import { useContext } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { getUserId, isUserId } from \"../services/isUserId\";\nimport { store } from \"../store\";\nimport { Emote, LogMessage, UserLogResponse } from \"../types/log\";\n\n\n\nexport function useLog(channel: string, username: string, year: string, month: string): Array<LogMessage> {\n    const { state } = useContext(store);\n\n    const { data } = useQuery<Array<LogMessage>>([\"log\", { channel: channel, username: username, year: year, month: month }], () => {\n        if (channel && username) {\n            const channelIsId = isUserId(channel);\n            const usernameIsId = isUserId(username);\n\n            if (channelIsId) {\n                channel = getUserId(channel)\n            }\n            if (usernameIsId) {\n                username = getUserId(username)\n            }\n\n            const queryUrl = new URL(`${state.apiBaseUrl}/channel${channelIsId ? \"id\" : \"\"}/${channel}/user${usernameIsId ? \"id\" : \"\"}/${username}/${year}/${month}`);\n            queryUrl.searchParams.append(\"json\", \"1\");\n            if (!state.settings.newOnBottom.value) {\n                queryUrl.searchParams.append(\"reverse\", \"1\");\n            }\n\n            return fetch(queryUrl.toString()).then((response) => {\n                if (response.ok) {\n                    return response;\n                }\n\n                throw Error(response.statusText);\n            }).then(response => response.json()).then((data: UserLogResponse) => {\n                const messages: Array<LogMessage> = [];\n\n                for (const msg of data.messages) {\n                    messages.push({ ...msg, timestamp: new Date(msg.timestamp), emotes: parseEmotes(msg.text, msg.tags[\"emotes\"]) })\n                }\n\n                return messages;\n            });\n        }\n\n        return [];\n    }, { refetchOnWindowFocus: false, refetchOnReconnect: false });\n\n    return data ?? [];\n}\n\nfunction parseEmotes(messageText: string, emotes: string | undefined): Array<Emote> {\n    const parsed: Array<Emote> = [];\n    if (!emotes) {\n        return parsed;\n    }\n\n    const groups = emotes.split(\"/\");\n\n    for (const group of groups) {\n        const [id, positions] = group.split(\":\");\n        const positionGroups = positions.split(\",\");\n\n        for (const positionGroup of positionGroups) {\n            const [startPos, endPos] = positionGroup.split(\"-\");\n\n            const startIndex = Number(startPos);\n            const endIndex = Number(endPos) + 1;\n\n            parsed.push({\n                id,\n                startIndex: startIndex,\n                endIndex: endIndex,\n                code: messageText.substr(startIndex, endIndex - startIndex)\n            });\n        }\n    }\n\n    return parsed;\n}","import { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\nimport { useBttvChannelEmotes } from \"./useBttvChannelEmotes\";\nimport { useBttvGlobalEmotes } from \"./useBttvGlobalEmotes\";\nimport { useFfzChannelEmotes } from \"./useFfzChannelEmotes\";\nimport { useFfzGlobalEmotes } from \"./useFfzGlobalEmotes\";\n\nexport function useThirdPartyEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst thirdPartyEmotes: Array<ThirdPartyEmote> = [\n\t\t...useBttvChannelEmotes(channelId),\n\t\t...useFfzChannelEmotes(channelId),\n\t\t...useBttvGlobalEmotes(),\n\t\t...useFfzGlobalEmotes(),\n\t];\n\n\treturn thirdPartyEmotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../store\";\nimport { BttvChannelEmotesResponse } from \"../types/Bttv\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useBttvChannelEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery([\"bttv:channel\", { channelId: channelId }], () => {\n\t\tif (channelId === \"\") {\n\t\t\treturn Promise.resolve({ sharedEmotes: [], channelEmotes: [] });\n\t\t}\n\n\t\treturn fetch(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`).then(res =>\n\t\t\tres.json() as Promise<BttvChannelEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const channelEmote of [...data?.channelEmotes ?? [], ...data?.sharedEmotes ?? []]) {\n\t\temotes.push({\n\t\t\tid: channelEmote.id,\n\t\t\tcode: channelEmote.code,\n\t\t\turls: {\n\t\t\t\tsmall: `https://cdn.betterttv.net/emote/${channelEmote.id}/1x`,\n\t\t\t\tmedium: `https://cdn.betterttv.net/emote/${channelEmote.id}/2x`,\n\t\t\t\tbig: `https://cdn.betterttv.net/emote/${channelEmote.id}/3x`,\n\t\t\t}\n\t\t});\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../store\";\nimport { EmoteSet, FfzChannelEmotesResponse } from \"../types/Ffz\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useFfzChannelEmotes(channelId: string): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery([\"ffz:channel\", { channelId: channelId }], () => {\n\t\tif (channelId === \"\") {\n\t\t\treturn Promise.resolve({sets: {}});\n\t\t}\n\n\t\treturn fetch(`https://api.frankerfacez.com/v1/room/id/${channelId}`).then(res =>\n\t\t\tres.json() as Promise<FfzChannelEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading || !data?.sets) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const set of Object.values(data.sets) as Array<EmoteSet>) {\n\t\tfor (const channelEmote of set.emoticons) {\n\t\t\temotes.push({\n\t\t\t\tid: String(channelEmote.id),\n\t\t\t\tcode: channelEmote.name,\n\t\t\t\turls: {\n\t\t\t\t\tsmall: channelEmote.urls[\"1\"],\n\t\t\t\t\tmedium: channelEmote.urls[\"2\"],\n\t\t\t\t\tbig: channelEmote.urls[\"4\"],\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../store\";\nimport { BttvGlobalEmotesResponse } from \"../types/Bttv\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useBttvGlobalEmotes(): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery(\"bttv:global\", () => {\n\t\treturn fetch(\"https://api.betterttv.net/3/cached/emotes/global\").then(res =>\n\t\t\tres.json() as Promise<BttvGlobalEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading || !data) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const channelEmote of data) {\n\t\temotes.push({\n\t\t\tid: channelEmote.id,\n\t\t\tcode: channelEmote.code,\n\t\t\turls: {\n\t\t\t\tsmall: `https://cdn.betterttv.net/emote/${channelEmote.id}/1x`,\n\t\t\t\tmedium: `https://cdn.betterttv.net/emote/${channelEmote.id}/2x`,\n\t\t\t\tbig: `https://cdn.betterttv.net/emote/${channelEmote.id}/3x`,\n\t\t\t}\n\t\t});\n\t}\n\n\treturn emotes;\n}","import { useQuery } from \"react-query\";\nimport { QueryDefaults } from \"../store\";\nimport { EmoteSet, FfzGlobalEmotesResponse } from \"../types/Ffz\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nexport function useFfzGlobalEmotes(): Array<ThirdPartyEmote> {\n\tconst { isLoading, error, data } = useQuery(\"ffz:global\", () => {\n\t\treturn fetch(\"https://api.frankerfacez.com/v1/set/global\").then(res =>\n\t\t\tres.json() as Promise<FfzGlobalEmotesResponse>\n\t\t);\n\t}, QueryDefaults);\n\n\tif (isLoading || !data?.sets) {\n\t\treturn [];\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn [];\n\t}\n\n\tconst emotes = [];\n\n\tfor (const set of Object.values(data.sets) as Array<EmoteSet>) {\n\t\tfor (const channelEmote of set.emoticons) {\n\t\t\temotes.push({\n\t\t\t\tid: String(channelEmote.id),\n\t\t\t\tcode: channelEmote.name,\n\t\t\t\turls: {\n\t\t\t\t\tsmall: channelEmote.urls[\"1\"],\n\t\t\t\t\tmedium: channelEmote.urls[\"2\"],\n\t\t\t\t\tbig: channelEmote.urls[\"4\"],\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\treturn emotes;\n}","import React, { useContext } from \"react\";\nimport Linkify from \"react-linkify\";\nimport styled from \"styled-components\";\nimport { store } from \"../store\";\nimport { LogMessage } from \"../types/log\";\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\n\nconst MessageContainer = styled.div`\n\n\ta {\n\t\tmargin: 0 2px;\n\t\tcolor: var(--theme2);\n\t\ttext-decoration: none;\n\n\t\t&:hover, &:active, &:focus {\n\t\t\tcolor: var(--theme2-bright);\n\t\t}\n\t}\n`;\n\nconst Emote = styled.img`\n\tmax-height: 18px;\n\tmargin: 0 2px;\n\tmargin-bottom: -2px;\n\twidth: auto;\n`;\n\nexport function Message({ message, thirdPartyEmotes }: { message: LogMessage, thirdPartyEmotes: Array<ThirdPartyEmote> }): JSX.Element {\n\tconst { state } = useContext(store);\n\tconst renderMessage = [];\n\n\tlet replaced;\n\tlet buffer = \"\";\n\n\tlet messageText = message.text;\n\tlet renderMessagePrefix = \"\";\n\tif (message.tags['system-msg']) {\n\t\tmessageText = messageText.replace(message.tags['system-msg'] + \" \", \"\");\n\n\t\trenderMessagePrefix = `${message.tags['system-msg']} `;\n\t}\n\n\n\tfor (let x = 0; x <= messageText.length; x++) {\n\t\tconst c = messageText[x];\n\n\t\treplaced = false;\n\n\t\tif (state.settings.showEmotes.value) {\n\t\t\tfor (const emote of message.emotes) {\n\t\t\t\tif (emote.startIndex === x) {\n\t\t\t\t\treplaced = true;\n\t\t\t\t\trenderMessage.push(<Emote\n\t\t\t\t\t\tclassName=\"emote\"\n\t\t\t\t\t\tkey={x}\n\t\t\t\t\t\talt={emote.code}\n\t\t\t\t\t\tsrc={`https://static-cdn.jtvnw.net/emoticons/v1/${emote.id}/1.0`}\n\t\t\t\t\t/>);\n\t\t\t\t\tx += emote.endIndex - emote.startIndex - 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!replaced) {\n\t\t\tif (c !== \" \" && x !== messageText.length) {\n\t\t\t\tbuffer += c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet emoteFound = false;\n\n\t\t\tfor (const emote of thirdPartyEmotes) {\n\t\t\t\tif (buffer.trim() === emote.code) {\n\t\t\t\t\trenderMessage.push(<Emote\n\t\t\t\t\t\tclassName=\"emote\"\n\t\t\t\t\t\tkey={x}\n\t\t\t\t\t\talt={emote.code}\n\t\t\t\t\t\tsrc={emote.urls.small}\n\t\t\t\t\t/>);\n\t\t\t\t\temoteFound = true;\n\t\t\t\t\tbuffer = \"\";\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!emoteFound) {\n\t\t\t\trenderMessage.push(<Linkify key={x} componentDecorator={(decoratedHref, decoratedText, key) => (\n\t\t\t\t\t<a target=\"__blank\" href={decoratedHref} key={key}>\n\t\t\t\t\t\t{decoratedText}\n\t\t\t\t\t</a>\n\t\t\t\t)}>{buffer}</Linkify>);\n\t\t\t\tbuffer = \"\";\n\t\t\t}\n\t\t\trenderMessage.push(c);\n\t\t}\n\t}\n\n\treturn <MessageContainer className=\"message\">\n\t\t{renderMessagePrefix}{renderMessage}\n\t</MessageContainer>;\n};","import React from \"react\";\nimport styled from \"styled-components\";\n\n\n\nconst UserContainer = styled.div.attrs(props => ({\n\tstyle: {\n\t\tcolor: props.color,\n\t}\n}))`\n\tdisplay: inline;\n`;\n\nexport function User({ displayName, color }: { displayName: string, color: string }): JSX.Element {\n\t\n\tconst renderColor = color !== \"\" ? color : \"grey\";\n\n\treturn <UserContainer color={renderColor} className=\"user\">\n\t\t{displayName}:\n\t</UserContainer>;\n}","import dayjs from \"dayjs\";\nimport React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { useThirdPartyEmotes } from \"../hooks/useThirdPartyEmotes\";\nimport { store } from \"../store\";\nimport { LogMessage } from \"../types/log\";\nimport { Message } from \"./Message\";\nimport { User } from \"./User\";\nimport utc from \"dayjs/plugin/utc\";\nimport timezone from \"dayjs/plugin/timezone\";\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\ndayjs.tz.guess()\n\nconst LogLineContainer = styled.li`\n\tdisplay: flex;\n\talign-items: flex-start;\n    margin-bottom: 1px;\n\n    .timestamp {\n        color: var(--text-dark);\n        user-select: none;\n        font-family: monospace;\n        white-space: nowrap;\n        line-height: 1.1rem;\n    }\n\n    .user {\n        margin-left: 5px;\n        user-select: none;\n        font-weight: bold;\n        line-height: 1.1rem;\n    }\n\n    .message {\n        margin-left: 5px;\n        line-height: 1.1rem;\n    }\n`;\n\nexport function LogLine({ message }: { message: LogMessage }) {\n    const { state } = useContext(store);\n\n    if (state.settings.showEmotes.value) {\n        return <LogLineWithEmotes message={message} />;\n    }\n\n    return <LogLineContainer className=\"logLine\">\n        {state.settings.showTimestamp.value &&<span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\n        <Message message={message} thirdPartyEmotes={[]} />\n    </LogLineContainer>\n}\n\nexport function LogLineWithEmotes({ message }: { message: LogMessage }) {\n    const thirdPartyEmotes = useThirdPartyEmotes(message.tags[\"room-id\"])\n    const { state } = useContext(store);\n\n    return <LogLineContainer className=\"logLine\">\n        {state.settings.showTimestamp.value &&<span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\n        <Message message={message} thirdPartyEmotes={thirdPartyEmotes} />\n    </LogLineContainer>\n}","import { InputAdornment, TextField } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\nimport React, { useContext, useState, CSSProperties, useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useLog } from \"../hooks/useLog\";\nimport { store } from \"../store\";\nimport { LogLine } from \"./LogLine\";\nimport { FixedSizeList as List } from 'react-window';\n\nconst ContentLogContainer = styled.ul`\n    padding: 0;\n    margin: 0;\n    position: relative;\n\n    .search {\n        position: absolute;\n        top: -52px;\n        width: 320px;\n        left: 0;\n    }\n\n    .logLine {\n        white-space: nowrap;\n    }\n\n    .list {\n        scrollbar-color: dark;\n    }\n`;\n\nexport function ContentLog({ year, month }: { year: string, month: string }) {\n    const { state, setState } = useContext(store);\n    const [searchText, setSearchText] = useState(\"\");\n\n    const logs = useLog(state.currentChannel ?? \"\", state.currentUsername ?? \"\", year, month)\n        .filter(log => log.text.toLowerCase().includes(searchText.toLowerCase()));\n\n    const Row = ({ index, style }: { index: number, style: CSSProperties }) => (\n        <div style={style}><LogLine key={logs[index].id ? logs[index].id : index} message={logs[index]} /></div>\n    );\n\n    const search = useRef<HTMLInputElement>(null);\n\n    const handleMouseEnter = () => {\n        setState({ ...state, activeSearchField: search.current })\n    }\n\n    useEffect(() => {\n        setState({ ...state, activeSearchField: search.current })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <ContentLogContainer onMouseEnter={handleMouseEnter}>\n        <TextField\n            className=\"search\"\n            label=\"Search\"\n            inputRef={search}\n            onChange={e => setSearchText(e.target.value)}\n            size=\"small\"\n            InputProps={{\n                startAdornment: (\n                    <InputAdornment position=\"start\">\n                        <Search />\n                    </InputAdornment>\n                ),\n            }}\n        />\n        <List\n            className=\"list\"\n            height={600}\n            itemCount={logs.length}\n            itemSize={20}\n            width={\"100%\"}\n        >\n            {Row}\n        </List>\n    </ContentLogContainer>\n}","import dayjs from \"dayjs\";\nimport React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { useThirdPartyEmotes } from \"../hooks/useThirdPartyEmotes\";\nimport { store } from \"../store\";\nimport { LogMessage } from \"../types/log\";\nimport { Message } from \"./Message\";\nimport { User } from \"./User\";\nimport utc from \"dayjs/plugin/utc\";\nimport timezone from \"dayjs/plugin/timezone\";\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\ndayjs.tz.guess()\n\nconst TwitchChatLogLineContainer = styled.li`\n\talign-items: flex-start;\n    margin-bottom: 1px;\n    padding: 5px 20px;\n\n    .timestamp {\n        color: var(--text-dark);\n        user-select: none;\n        font-family: monospace;\n        white-space: nowrap;\n        margin-right: 5px;\n        line-height: 1.1rem;\n    }\n\n    .user {\n        display: inline-block;\n        margin-right: 5px;\n        user-select: none;\n        font-weight: bold;\n        line-height: 1.1rem;\n    }\n\n    .message {\n        display: inline;\n        line-height: 20px;\n\n        a {\n            word-wrap: break-word;\n        }\n\n        .emote {\n            max-height: 28px;\n            margin: 0 2px;\n            margin-bottom: -10px;\n            width: auto;\n        }\n    }\n`;\n\nexport function TwitchChatLogLine({ message }: { message: LogMessage }) {\n    const { state } = useContext(store);\n\n    if (state.settings.showEmotes.value) {\n        return <LogLineWithEmotes message={message} />;\n    }\n\n    return <TwitchChatLogLineContainer className=\"logLine\">\n        {state.settings.showTimestamp.value && <span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\n        <Message message={message} thirdPartyEmotes={[]} />\n    </TwitchChatLogLineContainer>\n}\n\nfunction LogLineWithEmotes({ message }: { message: LogMessage }) {\n    const thirdPartyEmotes = useThirdPartyEmotes(message.tags[\"room-id\"])\n    const { state } = useContext(store);\n\n    return <TwitchChatLogLineContainer className=\"logLine\">\n        {state.settings.showTimestamp.value && <span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\n        <Message message={message} thirdPartyEmotes={thirdPartyEmotes} />\n    </TwitchChatLogLineContainer>\n}","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { useLog } from \"../hooks/useLog\";\nimport { store } from \"../store\";\nimport { TwitchChatLogLine } from \"./TwitchChatLogLine\";\n\nconst ContentLogContainer = styled.ul`\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    width: 340px;\n`;\n\nexport function TwitchChatContentLog({ year, month }: { year: string, month: string }) {\n    const { state } = useContext(store);\n\n    const logs = useLog(state.currentChannel ?? \"\", state.currentUsername ?? \"\", year, month)\n\n    return <ContentLogContainer>\n        {logs.map((log, index) => <TwitchChatLogLine key={log.id ? log.id : index} message={log} />)}\n    </ContentLogContainer>\n}","import { Button } from \"@material-ui/core\";\nimport React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Txt } from \"../icons/Txt\";\nimport { getUserId, isUserId } from \"../services/isUserId\";\nimport { store } from \"../store\";\nimport { ContentLog } from \"./ContentLog\";\nimport { TwitchChatContentLog } from \"./TwitchChatLogContainer\";\n\nconst LogContainer = styled.div`\n    position: relative;\n    background: var(--bg-bright);\n    border-radius: 3px;\n    padding: 0.5rem;\n    margin-top: 3rem;\n\n    .txt {\n        position: absolute;\n        top: 5px;\n        right: 15px;\n        opacity: 0.9;\n        cursor: pointer;\n        z-index: 999;\n\n        &:hover {\n            opacity: 1;\n        }\n    }\n`;\n\nexport function Log({ year, month, initialLoad = false }: { year: string, month: string, initialLoad?: boolean }) {\n    const { state } = useContext(store);\n    const [load, setLoad] = useState(initialLoad);\n\n    if (!load) {\n        return <LogContainer>\n            <LoadableLog year={year} month={month} onLoad={() => setLoad(true)} />\n        </LogContainer>\n    }\n\n    let txtHref = `${state.apiBaseUrl}`\n    if (state.currentChannel && isUserId(state.currentChannel)) {\n        txtHref += `/channelid/${getUserId(state.currentChannel)}`\n    } else {\n        txtHref += `/channel/${state.currentChannel}`\n    }\n\n    if (state.currentUsername && isUserId(state.currentUsername)) {\n        txtHref += `/userid/${getUserId(state.currentUsername)}`\n    } else {\n        txtHref += `/user/${state.currentUsername}`\n    }\n\n    txtHref += `/${year}/${month}?reverse`;\n\n    return <LogContainer>\n        <a className=\"txt\" target=\"__blank\" href={txtHref} rel=\"noopener noreferrer\"><Txt /></a>\n        {!state.settings.twitchChatMode.value && <ContentLog year={year} month={month} />}\n        {state.settings.twitchChatMode.value && <TwitchChatContentLog year={year} month={month} />}\n    </LogContainer>\n}\n\nconst LoadableLogContainer = styled.div`\n\n`;\n\nfunction LoadableLog({ year, month, onLoad }: { year: string, month: string, onLoad: () => void }) {\n    return <LoadableLogContainer>\n        <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={onLoad}>load {year}/{month}</Button>\n    </LoadableLogContainer>\n}","import React, { useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useAvailableLogs } from \"../hooks/useAvailableLogs\";\nimport { store } from \"../store\";\nimport { Log } from \"./Log\";\n\nconst LogContainerDiv = styled.div`\n    color: white;\n    padding: 2rem;\n    padding-top: 0;\n    width: 100%;\n`;\n\nexport function LogContainer() {\n    const { state } = useContext(store);\n\n    const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n    const ctrlKey = isMac ? \"metaKey\" : \"ctrlKey\";\n\n    useEffect(() => {\n        const listener = function (e: KeyboardEvent) {\n            if (e.key === 'f' && e[ctrlKey] && !state.settings.twitchChatMode.value) {\n                e.preventDefault();\n                if (state.activeSearchField) {\n                    state.activeSearchField.focus();\n                }\n            }\n        };\n\n        window.addEventListener(\"keydown\", listener)\n\n        return () => window.removeEventListener(\"keydown\", listener);\n    }, [state.activeSearchField, state.settings.twitchChatMode.value, ctrlKey]);\n\n    const availableLogs = useAvailableLogs(state.currentChannel, state.currentUsername);\n\n    return <LogContainerDiv>\n        {availableLogs.map((log, index) => <Log key={`${log.year}:${log.month}`} year={log.year} month={log.month} initialLoad={index === 0} />)}\n    </LogContainerDiv>\n}","import { useContext } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { getUserId, isUserId } from \"../services/isUserId\";\nimport { store } from \"../store\";\n\nexport type AvailableLogs = Array<{ month: string, year: string }>;\n\nexport function useAvailableLogs(channel: string | null, username: string | null): AvailableLogs {\n    const { state, setState } = useContext(store);\n\n    const { data } = useQuery<AvailableLogs>([\"availableLogs\", { channel: channel, username: username }], () => {\n        if (channel && username) {\n            const channelIsId = isUserId(channel);\n            const usernameIsId = isUserId(username);\n\n            if (channelIsId) {\n                channel = getUserId(channel)\n            }\n            if (usernameIsId) {\n                username = getUserId(username)\n            }\n\n            const queryUrl = new URL(`${state.apiBaseUrl}/list`);\n            queryUrl.searchParams.append(`channel${channelIsId ? \"id\" : \"\"}`, channel);\n            queryUrl.searchParams.append(`user${usernameIsId ? \"id\" : \"\"}`, username);\n\n            return fetch(queryUrl.toString()).then((response) => {\n                if (response.ok) {\n                    return response;\n                }\n\n                throw Error(response.statusText);\n            }).then(response => response.json())\n                .then((data: { availableLogs: AvailableLogs }) => data.availableLogs)\n                .catch(() => {\n                    setState({ ...state, error: true });\n\n                    return [];\n                });\n        }\n\n        return [];\n    }, { refetchOnWindowFocus: false, refetchOnReconnect: false });\n\n    return data ?? [];\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Filters } from \"./Filters\";\nimport { LogContainer } from \"./LogContainer\";\n\nconst PageContainer = styled.div`\n\t\n`;\n\nexport function Page() {\n\treturn <PageContainer>\n\t\t<Filters />\n\t\t<LogContainer />\n\t</PageContainer>;\n}","import React from 'react';\nimport { useContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ReactQueryCacheProvider } from 'react-query';\nimport { Page } from './components/Page';\nimport { StateProvider, store } from './store';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nconst pageTheme = createMuiTheme({\n\tpalette: {\n\t\ttype: 'dark'\n\t},\n});\n\nfunction App() {\n\tconst { state } = useContext(store);\n\n\treturn <ReactQueryCacheProvider queryCache={state.queryCache}>\n\t\t<Page />\n\t</ReactQueryCacheProvider>\n}\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<StateProvider>\n\t\t\t<ThemeProvider theme={pageTheme}>\n\t\t\t\t<App />\n\t\t\t</ThemeProvider>\n\t\t</StateProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}