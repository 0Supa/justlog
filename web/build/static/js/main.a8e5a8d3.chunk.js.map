{"version":3,"sources":["store.tsx","hooks/useLocalStorage.ts","components/Docs.tsx","components/Settings.tsx","components/Filters.tsx","hooks/useChannels.ts","errors/OptOutError.ts","services/isUserId.ts","icons/Txt.tsx","hooks/useLog.ts","hooks/useThirdPartyEmotes.ts","hooks/useBttvChannelEmotes.ts","hooks/useFfzChannelEmotes.ts","hooks/useBttvGlobalEmotes.ts","hooks/useFfzGlobalEmotes.ts","components/Message.tsx","components/User.tsx","components/LogLine.tsx","components/ContentLog.tsx","components/TwitchChatLogLine.tsx","components/TwitchChatLogContainer.tsx","components/Log.tsx","components/OptOutMessage.tsx","components/LogContainer.tsx","hooks/useAvailableLogs.ts","components/Page.tsx","index.tsx"],"names":["LocalStorageSettings","url","URL","window","location","href","defaultContext","state","queryClient","QueryClient","apiBaseUrl","process","REACT_APP_API_BASE_URL","protocol","host","settings","showEmotes","displayName","value","showName","showTimestamp","twitchChatMode","newOnBottom","currentChannel","searchParams","get","currentUsername","showSwagger","has","error","setState","setCurrents","setSettings","newSettings","setShowSwagger","show","store","createContext","Provider","StateProvider","children","key","initialValue","useState","item","localStorage","getItem","JSON","parse","console","log","setValue","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","returnValue","useLocalStorage","setSettingsStorage","Object","keys","removeQueries","toLowerCase","trim","set","history","replaceState","toString","delete","QueryDefaults","staleTime","DocsWrapper","styled","div","Docs","useContext","IconButton","aria-controls","aria-haspopup","onClick","size","color","Swagger","SwaggerWrapper","baseUrl","ReactDOM","createPortal","style","display","requestInterceptor","req","includes","port","document","body","SettingsContainer","Settings","anchorEl","setAnchorEl","menuItems","name","setting","push","MenuItem","newSetting","toggleSetting","Check","Clear","entries","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","FiltersContainer","form","FiltersWrapper","Filters","useQueryClient","channels","data","useQuery","queryUrl","fetch","then","response","ok","Error","statusText","json","refetchOnWindowFocus","refetchOnReconnect","useChannels","onSubmit","e","preventDefault","target","HTMLFormElement","FormData","channel","username","invalidateQueries","action","Autocomplete","options","map","width","defaultValue","getOptionLabel","clearOnBlur","renderInput","params","TextField","label","variant","autoFocus","autoComplete","Button","type","OptOutError","isUserId","startsWith","getUserId","replace","Txt","className","height","viewBox","d","fill","fillRule","useLog","year","month","channelIsId","usernameIsId","append","messages","msg","timestamp","Date","emotes","parseEmotes","text","tags","messageText","parsed","groups","split","positionGroups","startPos","endPos","startIndex","Number","endIndex","code","runes","substr","useThirdPartyEmotes","channelId","Promise","resolve","sharedEmotes","channelEmotes","res","isLoading","channelEmote","urls","small","medium","big","useBttvChannelEmotes","sets","values","emoticons","String","useFfzChannelEmotes","useBttvGlobalEmotes","useFfzGlobalEmotes","MessageContainer","Emote","img","Message","replaced","message","thirdPartyEmotes","renderMessage","buffer","renderMessagePrefix","messageTextEmoji","x","length","c","emote","alt","src","emoteFound","componentDecorator","decoratedHref","decoratedText","UserContainer","attrs","props","User","renderColor","dayjs","extend","utc","timezone","tz","guess","LogLineContainer","li","LogLine","LogLineWithEmotes","format","ContentLogContainer","ul","ContentLog","searchText","setSearchText","logs","filter","search","useRef","useEffect","activeSearchField","current","onMouseEnter","inputRef","onChange","InputProps","startAdornment","InputAdornment","position","Search","itemCount","itemSize","index","TwitchChatLogLineContainer","TwitchChatLogLine","TwitchChatContentLog","LogContainer","Log","initialLoad","load","setLoad","LoadableLog","onLoad","txtHref","rel","LoadableLogContainer","OptOutContainer","OptOutMessage","LogContainerDiv","ctrlKey","navigator","platform","toUpperCase","indexOf","listener","focus","addEventListener","removeEventListener","undefined","status","availableLogs","catch","err","useAvailableLogs","PageContainer","Page","pageTheme","createMuiTheme","palette","App","QueryClientProvider","client","render","StrictMode","ThemeProvider","theme","getElementById"],"mappings":"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","file":"static/js/main.a8e5a8d3.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport { QueryClient } from 'react-query'\r\nimport { useLocalStorage } from \"./hooks/useLocalStorage\";\r\n\r\nexport interface Settings {\r\n    showEmotes: Setting,\r\n    showName: Setting,\r\n    showTimestamp: Setting,\r\n    twitchChatMode: Setting,\r\n    newOnBottom: Setting,\r\n}\r\n\r\nexport enum LocalStorageSettings {\r\n    showEmotes,\r\n    showName,\r\n    showTimestamp,\r\n    twitchChatMode,\r\n    newOnBottom,\r\n}\r\n\r\nexport interface Setting {\r\n    displayName: string,\r\n    value: boolean,\r\n}\r\n\r\nexport interface State {\r\n    settings: Settings,\r\n    queryClient: QueryClient,\r\n    apiBaseUrl: string,\r\n    currentChannel: string | null,\r\n    currentUsername: string | null,\r\n    error: boolean,\r\n    activeSearchField: HTMLInputElement | null,\r\n    showSwagger: boolean,\r\n}\r\n\r\nexport type Action = Record<string, unknown>;\r\n\r\nconst url = new URL(window.location.href);\r\nconst defaultContext = {\r\n    state: {\r\n        queryClient: new QueryClient(),\r\n        apiBaseUrl: process.env.REACT_APP_API_BASE_URL ?? window.location.protocol + \"//\" + window.location.host,\r\n        settings: {\r\n            showEmotes: {\r\n                displayName: \"Show Emotes\",\r\n                value: true,\r\n            },\r\n            showName: {\r\n                displayName: \"Show Name\",\r\n                value: true,\r\n            },\r\n            showTimestamp: {\r\n                displayName: \"Show Timestamp\",\r\n                value: true,\r\n            },\r\n            twitchChatMode: {\r\n                displayName: \"Twitch Chat Mode\",\r\n                value: false,\r\n            },\r\n            newOnBottom: {\r\n                displayName: \"Newest messages on bottom\",\r\n                value: false,\r\n            },\r\n        },\r\n        currentChannel: url.searchParams.get(\"channel\"),\r\n        currentUsername: url.searchParams.get(\"username\"),\r\n        showSwagger: url.searchParams.has(\"swagger\"),\r\n        error: false,\r\n    } as State,\r\n    setState: (state: State) => { },\r\n    setCurrents: (currentChannel: string | null = null, currentUsername: string | null = null) => { },\r\n    setSettings: (newSettings: Settings) => { },\r\n    setShowSwagger: (show: boolean) => { },\r\n};\r\n\r\nconst store = createContext(defaultContext);\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }: { children: JSX.Element }): JSX.Element => {\r\n\r\n    const [settings, setSettingsStorage] = useLocalStorage(\"justlog:settings\", defaultContext.state.settings);\r\n    const [state, setState] = useState({ ...defaultContext.state, settings });\r\n\r\n    const setShowSwagger = (show: boolean) => {\r\n        const url = new URL(window.location.href);\r\n\r\n        if (show) {\r\n            url.searchParams.set(\"swagger\", \"\")\r\n        } else {\r\n            url.searchParams.delete(\"swagger\");\r\n        }\r\n\r\n        window.history.replaceState({}, \"justlog\", url.toString());\r\n\r\n        setState({ ...state, showSwagger: show })\r\n    }\r\n\r\n    const setSettings = (newSettings: Settings) => {\r\n        for (const key of Object.keys(newSettings)) {\r\n            if (typeof (defaultContext.state.settings as unknown as Record<string, Setting>)[key] === \"undefined\") {\r\n                delete (newSettings as unknown as Record<string, Setting>)[key];\r\n            }\r\n        }\r\n\r\n        state.queryClient.removeQueries(\"log\");\r\n\r\n        setSettingsStorage(newSettings);\r\n        setState({ ...state, settings: newSettings });\r\n    }\r\n\r\n    const setCurrents = (currentChannel: string | null = null, currentUsername: string | null = null) => {\r\n        currentChannel = currentChannel?.toLowerCase().trim() ?? null;\r\n        currentUsername = currentUsername?.toLowerCase().trim() ?? null;\r\n\r\n        setState({ ...state, currentChannel, currentUsername, error: false });\r\n\r\n        const url = new URL(window.location.href);\r\n        if (currentChannel) {\r\n            url.searchParams.set(\"channel\", currentChannel);\r\n        }\r\n        if (currentUsername) {\r\n            url.searchParams.set(\"username\", currentUsername);\r\n        }\r\n\r\n        window.history.replaceState({}, \"justlog\", url.toString());\r\n    }\r\n\r\n    return <Provider value={{ state, setState, setSettings, setCurrents, setShowSwagger }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider };\r\n\r\nexport const QueryDefaults = {\r\n    staleTime: 5 * 10 * 1000,\r\n};","import { useState } from \"react\";\r\n\r\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\r\n\t// State to store our value\r\n\t// Pass initial state function to useState so logic is only executed once\r\n\tconst [storedValue, setStoredValue] = useState(() => {\r\n\t\ttry {\r\n\t\t\t// Get from local storage by key\r\n\t\t\tconst item = window.localStorage.getItem(key);\r\n\t\t\t// Parse stored json or if none return initialValue\r\n\t\t\treturn item ? JSON.parse(item) : initialValue;\r\n\t\t} catch (error) {\r\n\t\t\t// If error also return initialValue\r\n\t\t\tconsole.log(error);\r\n\t\t\tsetValue(initialValue);\r\n\t\t\treturn initialValue;\r\n\t\t}\r\n\t});\r\n\r\n\t// Return a wrapped version of useState's setter function that ...\r\n\t// ... persists the new value to localStorage.\r\n\tconst setValue = (value: T): void => {\r\n\t\ttry {\r\n\t\t\t// Allow value to be a function so we have same API as useState\r\n\t\t\tconst valueToStore =\r\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\r\n\t\t\t// Save state\r\n\t\t\tsetStoredValue(valueToStore);\r\n\t\t\t// Save to local storage\r\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n\t\t} catch (error) {\r\n\t\t\t// A more advanced implementation would handle the error case\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\tlet returnValue = storedValue;\r\n\tif (typeof initialValue === \"object\") {\r\n\t\treturnValue = { ...initialValue, ...storedValue };\r\n\t}\r\n\r\n\treturn [returnValue, setValue];\r\n}","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport SwaggerUI from \"swagger-ui-react\"\r\nimport \"swagger-ui-react/swagger-ui.css\"\r\nimport ReactDOM from \"react-dom\";\r\nimport { store } from \"../store\";\r\n\r\nconst DocsWrapper = styled.div`\r\n\r\n`;\r\n\r\nexport function Docs() {\r\n    const { state, setShowSwagger } = useContext(store);\r\n\r\n    const handleClick = () => {\r\n        setShowSwagger(!state.showSwagger);\r\n    }\r\n\r\n    return <DocsWrapper>\r\n        <IconButton aria-controls=\"docs\" aria-haspopup=\"true\" onClick={handleClick} size=\"small\" color={state.showSwagger ? \"primary\" : \"default\"}>\r\n            <DescriptionIcon />\r\n        </IconButton>\r\n        <Swagger show={state.showSwagger} />\r\n    </DocsWrapper>;\r\n}\r\n\r\nconst SwaggerWrapper = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    background: var(--bg);\r\n    left: 0;\r\n    right: 0;\r\n    margin-top: 90px;\r\n    z-index: 999;\r\n    padding-bottom: 90px;\r\n\r\n    .swagger-ui {\r\n        background: var(--bg);\r\n        \r\n        .scheme-container {\r\n            background: var(--bg-bright);\r\n        }\r\n    }\r\n`;\r\n\r\ninterface SwaggerRequest {\r\n    [k: string]: any;\r\n}\r\n\r\nfunction Swagger({ show }: { show: boolean }) {\r\n    const { state } = useContext(store);\r\n    const baseUrl = new URL(state.apiBaseUrl);\r\n\r\n    const requestInterceptor = (req: SwaggerRequest): SwaggerRequest => {\r\n        if (req.url.includes(\"swagger.json\")) {\r\n            return req;\r\n        }\r\n\r\n        const url = new URL(req.url);\r\n\r\n        url.host = baseUrl.host;\r\n        url.protocol = baseUrl.protocol;\r\n        url.port = baseUrl.port;\r\n\r\n        req.url = url.toString();\r\n\r\n        return req;\r\n    }\r\n\r\n    return ReactDOM.createPortal(\r\n        <SwaggerWrapper style={{ display: show ? \"block\" : \"none\" }}>\r\n            <SwaggerUI url=\"/swagger.json\" requestInterceptor={requestInterceptor} />\r\n        </SwaggerWrapper>,\r\n        document.body\r\n    );\r\n}","import { IconButton, Menu, MenuItem } from \"@material-ui/core\";\r\nimport { Check, Clear, Settings as SettingsIcon } from \"@material-ui/icons\";\r\nimport React, { MouseEvent, useContext, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Setting, store } from \"../store\";\r\n\r\nconst SettingsContainer = styled.div`\r\n\t\r\n`;\r\n\r\nexport function Settings() {\r\n\tconst { state, setSettings } = useContext(store);\r\n\tconst [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\r\n\r\n\tconst handleClick = (event: MouseEvent<HTMLButtonElement>) => {\r\n\t\tsetAnchorEl(event.currentTarget);\r\n\t};\r\n\r\n\tconst handleClose = () => {\r\n\t\tsetAnchorEl(null);\r\n\t};\r\n\r\n\tconst toggleSetting = (name: string, setting: Setting) => {\r\n\t\tconst newSetting = { ...setting, value: !setting.value };\r\n\r\n\t\tsetSettings({ ...state.settings, [name]: newSetting });\r\n\t};\r\n\r\n\tconst menuItems = [];\r\n\r\n\tfor (const [name, setting] of Object.entries(state.settings)) {\r\n\t\tmenuItems.push(\r\n\t\t\t<MenuItem key={name} onClick={() => toggleSetting(name, setting)}>\r\n\t\t\t\t{setting.value ? <Check /> : <Clear />}&nbsp;&nbsp;{setting.displayName} \r\n\t\t\t</MenuItem>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<SettingsContainer>\r\n\t\t\t<IconButton aria-controls=\"settings\" aria-haspopup=\"true\" onClick={handleClick} size=\"small\">\r\n\t\t\t\t<SettingsIcon />\r\n\t\t\t</IconButton>\r\n\t\t\t<Menu\r\n\t\t\t\tid=\"settings\"\r\n\t\t\t\tanchorEl={anchorEl}\r\n\t\t\t\tkeepMounted\r\n\t\t\t\topen={Boolean(anchorEl)}\r\n\t\t\t\tonClose={handleClose}\r\n\t\t\t>\r\n\t\t\t\t{menuItems}\r\n\t\t\t</Menu>\r\n\t\t</SettingsContainer>\r\n\t);\r\n}","import { Button, TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport React, { FormEvent, useContext } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport { useChannels } from \"../hooks/useChannels\";\r\nimport { store } from \"../store\";\r\nimport { Docs } from \"./Docs\";\r\nimport { Settings } from \"./Settings\";\r\n\r\nconst FiltersContainer = styled.form`\r\n    display: inline-flex;\r\n    align-items: center;\r\n    padding: 15px;\r\n    background: var(--bg-bright);\r\n    border-bottom-left-radius: 3px;\r\n    border-bottom-right-radius: 3px;\r\n\tmargin: 0 auto;\r\n    z-index: 99;\r\n\r\n    > * {\r\n        margin-right: 15px !important;    \r\n\r\n        &:last-child {\r\n            margin-right: 0 !important;\r\n        }\r\n    }\r\n`;\r\n\r\nconst FiltersWrapper = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nexport function Filters() {\r\n    const { setCurrents, state } = useContext(store);\r\n    const queryClient = useQueryClient();\r\n    const channels = useChannels();\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (e.target instanceof HTMLFormElement) {\r\n            const data = new FormData(e.target);\r\n\r\n            const channel = data.get(\"channel\") as string | null;\r\n            const username = data.get(\"username\") as string | null;\r\n\r\n            queryClient.invalidateQueries([\"log\", { channel: channel?.toLowerCase(), username: username?.toLowerCase() }]);\r\n\r\n            setCurrents(channel, username);\r\n        }\r\n    };\r\n\r\n    return <FiltersWrapper>\r\n        <FiltersContainer onSubmit={handleSubmit} action=\"none\">\r\n            <Autocomplete\r\n                id=\"autocomplete-channels\"\r\n                options={channels.map(channel => channel.name)}\r\n                style={{ width: 225 }}\r\n                defaultValue={state.currentChannel}\r\n                getOptionLabel={(channel: string) => channel}\r\n                clearOnBlur={false}\r\n                renderInput={(params) => <TextField {...params} name=\"channel\" label=\"channel\" variant=\"filled\" autoFocus={state.currentChannel === null} />}\r\n            />\r\n            <TextField error={state.error} name=\"username\" label=\"username\" variant=\"filled\" autoComplete=\"off\" defaultValue={state.currentUsername} autoFocus={state.currentChannel !== null && state.currentUsername === null} />\r\n            <Button variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\">load</Button>\r\n            <Settings />\r\n            <Docs />\r\n        </FiltersContainer>\r\n    </FiltersWrapper>\r\n}","import { useContext } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { store } from \"../store\";\r\n\r\nexport interface Channel {\r\n    userID: string,\r\n    name: string\r\n}\r\n\r\nexport function useChannels(): Array<Channel> {\r\n    const { state } = useContext(store);\r\n\r\n    const { data } = useQuery<Array<Channel>>(`channels`, () => {\r\n\r\n        const queryUrl = new URL(`${state.apiBaseUrl}/channels`);\r\n\r\n        return fetch(queryUrl.toString()).then((response) => {\r\n            if (response.ok) {\r\n                return response;\r\n            }\r\n\r\n            throw Error(response.statusText);\r\n        }).then(response => response.json())\r\n            .then((data: { channels: Array<Channel> }) => data.channels);\r\n    }, { refetchOnWindowFocus: false, refetchOnReconnect: false });\r\n\r\n    return data ?? [];\r\n}","export class OptOutError extends Error { }","export function isUserId(value: string) {\r\n    return value.startsWith(\"id:\");\r\n}\r\n\r\nexport function getUserId(value: string) {\r\n    return value.replace(\"id:\", \"\");\r\n}","import React from \"react\";\r\n\r\nexport function Txt() {\r\n    return (\r\n        <svg className={\"txt\"} height={32} viewBox=\"0 0 32 32\" width={32}>\r\n            <title />\r\n            <path\r\n                d=\"M21 26v2.003A1.995 1.995 0 0119.003 30H3.997A2 2 0 012 27.993V5.007C2 3.898 2.9 3 4.009 3H14v6.002c0 1.111.898 1.998 2.006 1.998H21v2h-8.993A3.003 3.003 0 009 15.999V23A2.996 2.996 0 0012.007 26H21zM15 3v5.997c0 .554.451 1.003.99 1.003H21l-6-7zm-3.005 11C10.893 14 10 14.9 10 15.992v7.016A2 2 0 0011.995 25h17.01C30.107 25 31 24.1 31 23.008v-7.016A2 2 0 0029.005 14h-17.01zM14 17v6h1v-6h2v-1h-5v1h2zm6 2.5L18 16h1l1.5 2.625L22 16h1l-2 3.5 2 3.5h-1l-1.5-2.625L19 23h-1l2-3.5zm6-2.5v6h1v-6h2v-1h-5v1h2z\"\r\n                fill=\"#929292\"\r\n                fillRule=\"evenodd\"\r\n            />\r\n        </svg>\r\n    );\r\n}","import { useContext } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { getUserId, isUserId } from \"../services/isUserId\";\r\nimport { store } from \"../store\";\r\nimport { Emote, LogMessage, UserLogResponse } from \"../types/log\";\r\nimport runes from \"runes\";\r\n\r\n\r\n\r\nexport function useLog(channel: string, username: string, year: string, month: string): Array<LogMessage> {\r\n    const { state } = useContext(store);\r\n\r\n    const { data } = useQuery<Array<LogMessage>>([\"log\", { channel: channel, username: username, year: year, month: month }], () => {\r\n        if (channel && username) {\r\n            const channelIsId = isUserId(channel);\r\n            const usernameIsId = isUserId(username);\r\n\r\n            if (channelIsId) {\r\n                channel = getUserId(channel)\r\n            }\r\n            if (usernameIsId) {\r\n                username = getUserId(username)\r\n            }\r\n\r\n            const queryUrl = new URL(`${state.apiBaseUrl}/channel${channelIsId ? \"id\" : \"\"}/${channel}/user${usernameIsId ? \"id\" : \"\"}/${username}/${year}/${month}`);\r\n            queryUrl.searchParams.append(\"json\", \"1\");\r\n            if (!state.settings.newOnBottom.value) {\r\n                queryUrl.searchParams.append(\"reverse\", \"1\");\r\n            }\r\n\r\n            return fetch(queryUrl.toString()).then((response) => {\r\n                if (response.ok) {\r\n                    return response;\r\n                }\r\n\r\n                throw Error(response.statusText);\r\n            }).then(response => response.json()).then((data: UserLogResponse) => {\r\n                const messages: Array<LogMessage> = [];\r\n\r\n                for (const msg of data.messages) {\r\n                    messages.push({ ...msg, timestamp: new Date(msg.timestamp), emotes: parseEmotes(msg.text, msg.tags[\"emotes\"]) })\r\n                }\r\n\r\n                return messages;\r\n            });\r\n        }\r\n\r\n        return [];\r\n    }, { refetchOnWindowFocus: false, refetchOnReconnect: false });\r\n\r\n    return data ?? [];\r\n}\r\n\r\nfunction parseEmotes(messageText: string, emotes: string | undefined): Array<Emote> {\r\n    const parsed: Array<Emote> = [];\r\n    if (!emotes) {\r\n        return parsed;\r\n    }\r\n\r\n    const groups = emotes.split(\"/\");\r\n\r\n    for (const group of groups) {\r\n        const [id, positions] = group.split(\":\");\r\n        const positionGroups = positions.split(\",\");\r\n\r\n        for (const positionGroup of positionGroups) {\r\n            const [startPos, endPos] = positionGroup.split(\"-\");\r\n\r\n            const startIndex = Number(startPos);\r\n            const endIndex = Number(endPos) + 1;\r\n            \r\n            parsed.push({\r\n                id,\r\n                startIndex: startIndex,\r\n                endIndex: endIndex,\r\n                code: runes.substr(messageText, startIndex, endIndex - startIndex + 1)\r\n            });\r\n        }\r\n    }\r\n\r\n    return parsed;\r\n}","import { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\r\nimport { useBttvChannelEmotes } from \"./useBttvChannelEmotes\";\r\nimport { useBttvGlobalEmotes } from \"./useBttvGlobalEmotes\";\r\nimport { useFfzChannelEmotes } from \"./useFfzChannelEmotes\";\r\nimport { useFfzGlobalEmotes } from \"./useFfzGlobalEmotes\";\r\n\r\nexport function useThirdPartyEmotes(channelId: string): Array<ThirdPartyEmote> {\r\n\tconst thirdPartyEmotes: Array<ThirdPartyEmote> = [\r\n\t\t...useBttvChannelEmotes(channelId),\r\n\t\t...useFfzChannelEmotes(channelId),\r\n\t\t...useBttvGlobalEmotes(),\r\n\t\t...useFfzGlobalEmotes(),\r\n\t];\r\n\r\n\treturn thirdPartyEmotes;\r\n}","import { useQuery } from \"react-query\";\r\nimport { QueryDefaults } from \"../store\";\r\nimport { BttvChannelEmotesResponse } from \"../types/Bttv\";\r\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\r\n\r\nexport function useBttvChannelEmotes(channelId: string): Array<ThirdPartyEmote> {\r\n\tconst { isLoading, error, data } = useQuery([\"bttv:channel\", { channelId: channelId }], () => {\r\n\t\tif (channelId === \"\") {\r\n\t\t\treturn Promise.resolve({ sharedEmotes: [], channelEmotes: [] });\r\n\t\t}\r\n\r\n\t\treturn fetch(`https://api.betterttv.net/3/cached/users/twitch/${channelId}`).then(res =>\r\n\t\t\tres.json() as Promise<BttvChannelEmotesResponse>\r\n\t\t);\r\n\t}, QueryDefaults);\r\n\r\n\tif (isLoading) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tif (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn [];\r\n\t}\r\n\r\n\tconst emotes = [];\r\n\r\n\tfor (const channelEmote of [...data?.channelEmotes ?? [], ...data?.sharedEmotes ?? []]) {\r\n\t\temotes.push({\r\n\t\t\tid: channelEmote.id,\r\n\t\t\tcode: channelEmote.code,\r\n\t\t\turls: {\r\n\t\t\t\tsmall: `https://cdn.betterttv.net/emote/${channelEmote.id}/1x`,\r\n\t\t\t\tmedium: `https://cdn.betterttv.net/emote/${channelEmote.id}/2x`,\r\n\t\t\t\tbig: `https://cdn.betterttv.net/emote/${channelEmote.id}/3x`,\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn emotes;\r\n}","import { useQuery } from \"react-query\";\r\nimport { QueryDefaults } from \"../store\";\r\nimport { EmoteSet, FfzChannelEmotesResponse } from \"../types/Ffz\";\r\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\r\n\r\nexport function useFfzChannelEmotes(channelId: string): Array<ThirdPartyEmote> {\r\n\tconst { isLoading, error, data } = useQuery([\"ffz:channel\", { channelId: channelId }], () => {\r\n\t\tif (channelId === \"\") {\r\n\t\t\treturn Promise.resolve({sets: {}});\r\n\t\t}\r\n\r\n\t\treturn fetch(`https://api.frankerfacez.com/v1/room/id/${channelId}`).then(res =>\r\n\t\t\tres.json() as Promise<FfzChannelEmotesResponse>\r\n\t\t);\r\n\t}, QueryDefaults);\r\n\r\n\tif (isLoading || !data?.sets) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tif (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn [];\r\n\t}\r\n\r\n\tconst emotes = [];\r\n\r\n\tfor (const set of Object.values(data.sets) as Array<EmoteSet>) {\r\n\t\tfor (const channelEmote of set.emoticons) {\r\n\t\t\temotes.push({\r\n\t\t\t\tid: String(channelEmote.id),\r\n\t\t\t\tcode: channelEmote.name,\r\n\t\t\t\turls: {\r\n\t\t\t\t\tsmall: channelEmote.urls[\"1\"],\r\n\t\t\t\t\tmedium: channelEmote.urls[\"2\"],\r\n\t\t\t\t\tbig: channelEmote.urls[\"4\"],\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn emotes;\r\n}","import { useQuery } from \"react-query\";\r\nimport { QueryDefaults } from \"../store\";\r\nimport { BttvGlobalEmotesResponse } from \"../types/Bttv\";\r\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\r\n\r\nexport function useBttvGlobalEmotes(): Array<ThirdPartyEmote> {\r\n\tconst { isLoading, error, data } = useQuery(\"bttv:global\", () => {\r\n\t\treturn fetch(\"https://api.betterttv.net/3/cached/emotes/global\").then(res =>\r\n\t\t\tres.json() as Promise<BttvGlobalEmotesResponse>\r\n\t\t);\r\n\t}, QueryDefaults);\r\n\r\n\tif (isLoading || !data) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tif (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn [];\r\n\t}\r\n\r\n\tconst emotes = [];\r\n\r\n\tfor (const channelEmote of data) {\r\n\t\temotes.push({\r\n\t\t\tid: channelEmote.id,\r\n\t\t\tcode: channelEmote.code,\r\n\t\t\turls: {\r\n\t\t\t\tsmall: `https://cdn.betterttv.net/emote/${channelEmote.id}/1x`,\r\n\t\t\t\tmedium: `https://cdn.betterttv.net/emote/${channelEmote.id}/2x`,\r\n\t\t\t\tbig: `https://cdn.betterttv.net/emote/${channelEmote.id}/3x`,\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn emotes;\r\n}","import { useQuery } from \"react-query\";\r\nimport { QueryDefaults } from \"../store\";\r\nimport { EmoteSet, FfzGlobalEmotesResponse } from \"../types/Ffz\";\r\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\r\n\r\nexport function useFfzGlobalEmotes(): Array<ThirdPartyEmote> {\r\n\tconst { isLoading, error, data } = useQuery(\"ffz:global\", () => {\r\n\t\treturn fetch(\"https://api.frankerfacez.com/v1/set/global\").then(res =>\r\n\t\t\tres.json() as Promise<FfzGlobalEmotesResponse>\r\n\t\t);\r\n\t}, QueryDefaults);\r\n\r\n\tif (isLoading || !data?.sets) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tif (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn [];\r\n\t}\r\n\r\n\tconst emotes = [];\r\n\r\n\tfor (const set of Object.values(data.sets) as Array<EmoteSet>) {\r\n\t\tfor (const channelEmote of set.emoticons) {\r\n\t\t\temotes.push({\r\n\t\t\t\tid: String(channelEmote.id),\r\n\t\t\t\tcode: channelEmote.name,\r\n\t\t\t\turls: {\r\n\t\t\t\t\tsmall: channelEmote.urls[\"1\"],\r\n\t\t\t\t\tmedium: channelEmote.urls[\"2\"],\r\n\t\t\t\t\tbig: channelEmote.urls[\"4\"],\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn emotes;\r\n}","import React, { useContext } from \"react\";\r\nimport Linkify from \"react-linkify\";\r\nimport styled from \"styled-components\";\r\nimport { store } from \"../store\";\r\nimport { LogMessage } from \"../types/log\";\r\nimport { ThirdPartyEmote } from \"../types/ThirdPartyEmote\";\r\nimport runes from \"runes\";\r\n\r\nconst MessageContainer = styled.div`\r\n\r\n\ta {\r\n\t\tmargin: 0 2px;\r\n\t\tcolor: var(--theme2);\r\n\t\ttext-decoration: none;\r\n\r\n\t\t&:hover, &:active, &:focus {\r\n\t\t\tcolor: var(--theme2-bright);\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst Emote = styled.img`\r\n\tmax-height: 18px;\r\n\tmargin: 0 2px;\r\n\tmargin-bottom: -2px;\r\n\twidth: auto;\r\n`;\r\n\r\nexport function Message({ message, thirdPartyEmotes }: { message: LogMessage, thirdPartyEmotes: Array<ThirdPartyEmote> }): JSX.Element {\r\n\tconst { state } = useContext(store);\r\n\tconst renderMessage = [];\r\n\r\n\tlet replaced;\r\n\tlet buffer = \"\";\r\n\r\n\tlet messageText = message.text;\r\n\tlet renderMessagePrefix = \"\";\r\n\tif (message.tags['system-msg']) {\r\n\t\tmessageText = messageText.replace(message.tags['system-msg'] + \" \", \"\");\r\n\r\n\t\trenderMessagePrefix = `${message.tags['system-msg']} `;\r\n\t}\r\n\r\n\tconst messageTextEmoji = runes(messageText);\r\n\r\n\tfor (let x = 0; x <= messageTextEmoji.length; x++) {\r\n\t\tconst c = messageTextEmoji[x];\r\n\r\n\t\treplaced = false;\r\n\r\n\t\tif (state.settings.showEmotes.value) {\r\n\t\t\tfor (const emote of message.emotes) {\r\n\t\t\t\tif (emote.startIndex === x) {\r\n\t\t\t\t\treplaced = true;\r\n\t\t\t\t\trenderMessage.push(<Emote\r\n\t\t\t\t\t\tclassName=\"emote\"\r\n\t\t\t\t\t\tkey={x}\r\n\t\t\t\t\t\talt={emote.code}\r\n\t\t\t\t\t\tsrc={`https://static-cdn.jtvnw.net/emoticons/v2/${emote.id}/default/dark/1.0`}\r\n\t\t\t\t\t/>);\r\n\t\t\t\t\tx += emote.endIndex - emote.startIndex - 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!replaced) {\r\n\t\t\tif (c !== \" \" && x !== messageTextEmoji.length) {\r\n\t\t\t\tbuffer += c;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet emoteFound = false;\r\n\r\n\t\t\tfor (const emote of thirdPartyEmotes) {\r\n\t\t\t\tif (buffer.trim() === emote.code) {\r\n\t\t\t\t\trenderMessage.push(<Emote\r\n\t\t\t\t\t\tclassName=\"emote\"\r\n\t\t\t\t\t\tkey={x}\r\n\t\t\t\t\t\talt={emote.code}\r\n\t\t\t\t\t\tsrc={emote.urls.small}\r\n\t\t\t\t\t/>);\r\n\t\t\t\t\temoteFound = true;\r\n\t\t\t\t\tbuffer = \"\";\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!emoteFound) {\r\n\t\t\t\trenderMessage.push(<Linkify key={x} componentDecorator={(decoratedHref, decoratedText, key) => (\r\n\t\t\t\t\t<a target=\"__blank\" href={decoratedHref} key={key}>\r\n\t\t\t\t\t\t{decoratedText}\r\n\t\t\t\t\t</a>\r\n\t\t\t\t)}>{buffer}</Linkify>);\r\n\t\t\t\tbuffer = \"\";\r\n\t\t\t}\r\n\r\n\t\t\tif (c === \" \" && !state.settings.twitchChatMode.value) {\r\n\t\t\t\trenderMessage.push(<>&nbsp;</>);\r\n\t\t\t} else {\r\n\t\t\t\trenderMessage.push(c);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn <MessageContainer className=\"message\">\r\n\t\t{renderMessagePrefix}{renderMessage}\r\n\t</MessageContainer>;\r\n};","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\n\r\nconst UserContainer = styled.div.attrs(props => ({\r\n\tstyle: {\r\n\t\tcolor: props.color,\r\n\t}\r\n}))`\r\n\tdisplay: inline;\r\n`;\r\n\r\nexport function User({ displayName, color }: { displayName: string, color: string }): JSX.Element {\r\n\t\r\n\tconst renderColor = color !== \"\" ? color : \"grey\";\r\n\r\n\treturn <UserContainer color={renderColor} className=\"user\">\r\n\t\t{displayName}:\r\n\t</UserContainer>;\r\n}","import dayjs from \"dayjs\";\r\nimport React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useThirdPartyEmotes } from \"../hooks/useThirdPartyEmotes\";\r\nimport { store } from \"../store\";\r\nimport { LogMessage } from \"../types/log\";\r\nimport { Message } from \"./Message\";\r\nimport { User } from \"./User\";\r\nimport utc from \"dayjs/plugin/utc\";\r\nimport timezone from \"dayjs/plugin/timezone\";\r\n\r\ndayjs.extend(utc)\r\ndayjs.extend(timezone)\r\ndayjs.tz.guess()\r\n\r\nconst LogLineContainer = styled.li`\r\n\tdisplay: flex;\r\n\talign-items: flex-start;\r\n    margin-bottom: 1px;\r\n\r\n    .timestamp {\r\n        color: var(--text-dark);\r\n        user-select: none;\r\n        font-family: monospace;\r\n        white-space: nowrap;\r\n        line-height: 1.1rem;\r\n    }\r\n\r\n    .user {\r\n        margin-left: 5px;\r\n        user-select: none;\r\n        font-weight: bold;\r\n        line-height: 1.1rem;\r\n    }\r\n\r\n    .message {\r\n        margin-left: 5px;\r\n        line-height: 1.1rem;\r\n    }\r\n`;\r\n\r\nexport function LogLine({ message }: { message: LogMessage }) {\r\n    const { state } = useContext(store);\r\n\r\n    if (state.settings.showEmotes.value) {\r\n        return <LogLineWithEmotes message={message} />;\r\n    }\r\n\r\n    return <LogLineContainer className=\"logLine\">\r\n        {state.settings.showTimestamp.value &&<span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\r\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\r\n        <Message message={message} thirdPartyEmotes={[]} />\r\n    </LogLineContainer>\r\n}\r\n\r\nexport function LogLineWithEmotes({ message }: { message: LogMessage }) {\r\n    const thirdPartyEmotes = useThirdPartyEmotes(message.tags[\"room-id\"])\r\n    const { state } = useContext(store);\r\n\r\n    return <LogLineContainer className=\"logLine\">\r\n        {state.settings.showTimestamp.value &&<span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\r\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\r\n        <Message message={message} thirdPartyEmotes={thirdPartyEmotes} />\r\n    </LogLineContainer>\r\n}","import { InputAdornment, TextField } from \"@material-ui/core\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport React, { useContext, useState, CSSProperties, useRef, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useLog } from \"../hooks/useLog\";\r\nimport { store } from \"../store\";\r\nimport { LogLine } from \"./LogLine\";\r\nimport { FixedSizeList as List } from 'react-window';\r\n\r\nconst ContentLogContainer = styled.ul`\r\n    padding: 0;\r\n    margin: 0;\r\n    position: relative;\r\n\r\n    .search {\r\n        position: absolute;\r\n        top: -52px;\r\n        width: 320px;\r\n        left: 0;\r\n    }\r\n\r\n    .logLine {\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .list {\r\n        scrollbar-color: dark;\r\n    }\r\n`;\r\n\r\nexport function ContentLog({ year, month }: { year: string, month: string }) {\r\n    const { state, setState } = useContext(store);\r\n    const [searchText, setSearchText] = useState(\"\");\r\n\r\n    const logs = useLog(state.currentChannel ?? \"\", state.currentUsername ?? \"\", year, month)\r\n        .filter(log => log.text.toLowerCase().includes(searchText.toLowerCase()));\r\n\r\n    const Row = ({ index, style }: { index: number, style: CSSProperties }) => (\r\n        <div style={style}><LogLine key={logs[index].id ? logs[index].id : index} message={logs[index]} /></div>\r\n    );\r\n\r\n    const search = useRef<HTMLInputElement>(null);\r\n\r\n    const handleMouseEnter = () => {\r\n        setState({ ...state, activeSearchField: search.current })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState({ ...state, activeSearchField: search.current })\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return <ContentLogContainer onMouseEnter={handleMouseEnter}>\r\n        <TextField\r\n            className=\"search\"\r\n            label=\"Search\"\r\n            inputRef={search}\r\n            onChange={e => setSearchText(e.target.value)}\r\n            size=\"small\"\r\n            InputProps={{\r\n                startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                        <Search />\r\n                    </InputAdornment>\r\n                ),\r\n            }}\r\n        />\r\n        <List\r\n            className=\"list\"\r\n            height={600}\r\n            itemCount={logs.length}\r\n            itemSize={20}\r\n            width={\"100%\"}\r\n        >\r\n            {Row}\r\n        </List>\r\n    </ContentLogContainer>\r\n}","import dayjs from \"dayjs\";\r\nimport React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useThirdPartyEmotes } from \"../hooks/useThirdPartyEmotes\";\r\nimport { store } from \"../store\";\r\nimport { LogMessage } from \"../types/log\";\r\nimport { Message } from \"./Message\";\r\nimport { User } from \"./User\";\r\nimport utc from \"dayjs/plugin/utc\";\r\nimport timezone from \"dayjs/plugin/timezone\";\r\n\r\ndayjs.extend(utc)\r\ndayjs.extend(timezone)\r\ndayjs.tz.guess()\r\n\r\nconst TwitchChatLogLineContainer = styled.li`\r\n\talign-items: flex-start;\r\n    margin-bottom: 1px;\r\n    padding: 5px 20px;\r\n\r\n    .timestamp {\r\n        color: var(--text-dark);\r\n        user-select: none;\r\n        font-family: monospace;\r\n        white-space: nowrap;\r\n        margin-right: 5px;\r\n        line-height: 1.1rem;\r\n    }\r\n\r\n    .user {\r\n        display: inline-block;\r\n        margin-right: 5px;\r\n        user-select: none;\r\n        font-weight: bold;\r\n        line-height: 1.1rem;\r\n    }\r\n\r\n    .message {\r\n        display: inline;\r\n        line-height: 20px;\r\n\r\n        a {\r\n            word-wrap: break-word;\r\n        }\r\n\r\n        .emote {\r\n            max-height: 28px;\r\n            margin: 0 2px;\r\n            margin-bottom: -10px;\r\n            width: auto;\r\n        }\r\n    }\r\n`;\r\n\r\nexport function TwitchChatLogLine({ message }: { message: LogMessage }) {\r\n    const { state } = useContext(store);\r\n\r\n    if (state.settings.showEmotes.value) {\r\n        return <LogLineWithEmotes message={message} />;\r\n    }\r\n\r\n    return <TwitchChatLogLineContainer className=\"logLine\">\r\n        {state.settings.showTimestamp.value && <span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\r\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\r\n        <Message message={message} thirdPartyEmotes={[]} />\r\n    </TwitchChatLogLineContainer>\r\n}\r\n\r\nfunction LogLineWithEmotes({ message }: { message: LogMessage }) {\r\n    const thirdPartyEmotes = useThirdPartyEmotes(message.tags[\"room-id\"])\r\n    const { state } = useContext(store);\r\n\r\n    return <TwitchChatLogLineContainer className=\"logLine\">\r\n        {state.settings.showTimestamp.value && <span className=\"timestamp\">{dayjs(message.timestamp).format(\"YYYY-MM-DD HH:mm:ss\")}</span>}\r\n        {state.settings.showName.value && <User displayName={message.displayName} color={message.tags[\"color\"]} />}\r\n        <Message message={message} thirdPartyEmotes={thirdPartyEmotes} />\r\n    </TwitchChatLogLineContainer>\r\n}","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useLog } from \"../hooks/useLog\";\r\nimport { store } from \"../store\";\r\nimport { TwitchChatLogLine } from \"./TwitchChatLogLine\";\r\n\r\nconst ContentLogContainer = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    width: 340px;\r\n`;\r\n\r\nexport function TwitchChatContentLog({ year, month }: { year: string, month: string }) {\r\n    const { state } = useContext(store);\r\n\r\n    const logs = useLog(state.currentChannel ?? \"\", state.currentUsername ?? \"\", year, month)\r\n\r\n    return <ContentLogContainer>\r\n        {logs.map((log, index) => <TwitchChatLogLine key={log.id ? log.id : index} message={log} />)}\r\n    </ContentLogContainer>\r\n}","import { Button } from \"@material-ui/core\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Txt } from \"../icons/Txt\";\r\nimport { getUserId, isUserId } from \"../services/isUserId\";\r\nimport { store } from \"../store\";\r\nimport { ContentLog } from \"./ContentLog\";\r\nimport { TwitchChatContentLog } from \"./TwitchChatLogContainer\";\r\n\r\nconst LogContainer = styled.div`\r\n    position: relative;\r\n    background: var(--bg-bright);\r\n    border-radius: 3px;\r\n    padding: 0.5rem;\r\n    margin-top: 3rem;\r\n\r\n    .txt {\r\n        position: absolute;\r\n        top: 5px;\r\n        right: 15px;\r\n        opacity: 0.9;\r\n        cursor: pointer;\r\n        z-index: 999;\r\n\r\n        &:hover {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nexport function Log({ year, month, initialLoad = false }: { year: string, month: string, initialLoad?: boolean }) {\r\n    const { state } = useContext(store);\r\n    const [load, setLoad] = useState(initialLoad);\r\n\r\n    if (!load) {\r\n        return <LogContainer>\r\n            <LoadableLog year={year} month={month} onLoad={() => setLoad(true)} />\r\n        </LogContainer>\r\n    }\r\n\r\n    let txtHref = `${state.apiBaseUrl}`\r\n    if (state.currentChannel && isUserId(state.currentChannel)) {\r\n        txtHref += `/channelid/${getUserId(state.currentChannel)}`\r\n    } else {\r\n        txtHref += `/channel/${state.currentChannel}`\r\n    }\r\n\r\n    if (state.currentUsername && isUserId(state.currentUsername)) {\r\n        txtHref += `/userid/${getUserId(state.currentUsername)}`\r\n    } else {\r\n        txtHref += `/user/${state.currentUsername}`\r\n    }\r\n\r\n    txtHref += `/${year}/${month}?reverse`;\r\n\r\n    return <LogContainer>\r\n        <a className=\"txt\" target=\"__blank\" href={txtHref} rel=\"noopener noreferrer\"><Txt /></a>\r\n        {!state.settings.twitchChatMode.value && <ContentLog year={year} month={month} />}\r\n        {state.settings.twitchChatMode.value && <TwitchChatContentLog year={year} month={month} />}\r\n    </LogContainer>\r\n}\r\n\r\nconst LoadableLogContainer = styled.div`\r\n\r\n`;\r\n\r\nfunction LoadableLog({ year, month, onLoad }: { year: string, month: string, onLoad: () => void }) {\r\n    return <LoadableLogContainer>\r\n        <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={onLoad}>load {year}/{month}</Button>\r\n    </LoadableLogContainer>\r\n}","import styled from \"styled-components\";\r\nimport React from \"react\";\r\n\r\nconst OptOutContainer = styled.div`\r\n    display: block;\r\n    font-weight: bold;\r\n    color: var(--danger);\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    padding: 2rem;\r\n`;\r\n\r\nexport function OptOutMessage() {\r\n    return <OptOutContainer>User or channel has opted out</OptOutContainer>\r\n}","import React, { useContext, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { OptOutError } from \"../errors/OptOutError\";\r\nimport { useAvailableLogs } from \"../hooks/useAvailableLogs\";\r\nimport { store } from \"../store\";\r\nimport { Log } from \"./Log\";\r\nimport { OptOutMessage } from \"./OptOutMessage\";\r\n\r\nconst LogContainerDiv = styled.div`\r\n    color: white;\r\n    padding: 2rem;\r\n    padding-top: 0;\r\n    width: 100%;\r\n`;\r\n\r\nexport function LogContainer() {\r\n    const { state } = useContext(store);\r\n\r\n    const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\r\n    const ctrlKey = isMac ? \"metaKey\" : \"ctrlKey\";\r\n\r\n    useEffect(() => {\r\n        const listener = function (e: KeyboardEvent) {\r\n            if (e.key === 'f' && e[ctrlKey] && !state.settings.twitchChatMode.value) {\r\n                e.preventDefault();\r\n                if (state.activeSearchField) {\r\n                    state.activeSearchField.focus();\r\n                }\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"keydown\", listener)\r\n\r\n        return () => window.removeEventListener(\"keydown\", listener);\r\n    }, [state.activeSearchField, state.settings.twitchChatMode.value, ctrlKey]);\r\n\r\n    const [availableLogs, err] = useAvailableLogs(state.currentChannel, state.currentUsername);\r\n    if (err instanceof OptOutError) {\r\n        return <OptOutMessage />;\r\n    }\r\n\r\n    return <LogContainerDiv>\r\n        {availableLogs.map((log, index) => <Log key={`${log.year}:${log.month}`} year={log.year} month={log.month} initialLoad={index === 0} />)}\r\n    </LogContainerDiv>\r\n}","import { useContext } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { OptOutError } from \"../errors/OptOutError\";\r\nimport { getUserId, isUserId } from \"../services/isUserId\";\r\nimport { store } from \"../store\";\r\n\r\nexport type AvailableLogs = Array<{ month: string, year: string }>;\r\n\r\nexport function useAvailableLogs(channel: string | null, username: string | null): [AvailableLogs, Error | undefined] {\r\n    const { state, setState } = useContext(store);\r\n\r\n    // @ts-ignore I don't understand this error :)\r\n    const { data } = useQuery<[AvailableLogs, Error | undefined]>([\"availableLogs\", { channel: channel, username: username }], () => {\r\n        if (!channel || !username) {\r\n            return Promise.resolve([[], undefined]);\r\n        }\r\n\r\n        const channelIsId = isUserId(channel);\r\n        const usernameIsId = isUserId(username);\r\n\r\n        if (channelIsId) {\r\n            channel = getUserId(channel)\r\n        }\r\n        if (usernameIsId) {\r\n            username = getUserId(username)\r\n        }\r\n\r\n        const queryUrl = new URL(`${state.apiBaseUrl}/list`);\r\n        queryUrl.searchParams.append(`channel${channelIsId ? \"id\" : \"\"}`, channel);\r\n        queryUrl.searchParams.append(`user${usernameIsId ? \"id\" : \"\"}`, username);\r\n\r\n        return fetch(queryUrl.toString()).then((response) => {\r\n            if (response.ok) {\r\n                return response;\r\n            }\r\n\r\n            setState({ ...state, error: true });\r\n\r\n            if (response.status === 403) {\r\n                throw new OptOutError();\r\n            }\r\n\r\n            throw Error(response.statusText);\r\n        }).then(response => response.json())\r\n            .then((data: { availableLogs: AvailableLogs }) => [data.availableLogs, undefined])\r\n            .catch((err) => {\r\n                return [[], err];\r\n            });        \r\n    }, { refetchOnWindowFocus: false, refetchOnReconnect: false });\r\n\r\n    return data as [AvailableLogs, Error | undefined] | undefined ?? [[], undefined];\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Filters } from \"./Filters\";\r\nimport { LogContainer } from \"./LogContainer\";\r\n\r\nconst PageContainer = styled.div`\r\n\t\r\n`;\r\n\r\nexport function Page() {\r\n\treturn <PageContainer>\r\n\t\t<Filters />\r\n\t\t<LogContainer />\r\n\t</PageContainer>;\r\n}","import React from 'react';\r\nimport { useContext } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { QueryClientProvider } from 'react-query';\r\nimport { Page } from './components/Page';\r\nimport { StateProvider, store } from './store';\r\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\n\r\nconst pageTheme = createMuiTheme({\r\n\tpalette: {\r\n\t\ttype: 'dark'\r\n\t},\r\n});\r\n\r\nfunction App() {\r\n\tconst { state } = useContext(store);\r\n\r\n\treturn <QueryClientProvider client={state.queryClient}>\r\n\t\t<Page />\r\n\t</QueryClientProvider>\r\n}\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<StateProvider>\r\n\t\t\t<ThemeProvider theme={pageTheme}>\r\n\t\t\t\t<App />\r\n\t\t\t</ThemeProvider>\r\n\t\t</StateProvider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}